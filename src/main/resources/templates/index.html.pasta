<i:arg name="buckets" type="List"/>
<i:arg name="baseUrl" type="String"/>
<i:arg name="accessKey" type="String"/>
<i:arg name="secretKey" type="String"/>

<w:page title="Start">
    <i:block name="breadcrumbBar"/>

    <i:invoke template="/templates/header.html.pasta" title="S3 ninja" subtitle="@tagLine"/>

    <div class="row">
        <div class="col-md-4">
            <div class="well">
                <dl>
                    <dt>Storage Path</dt>
                    <dd>
                        <small>@baseUrl</small>
                    </dd>
                </dl>
                <dl>
                    <dt>Access Key</dt>
                    <dd>
                        <small>@accessKey</small>
                    </dd>
                </dl>
                <dl>
                    <dt>Secret Key</dt>
                    <dd>
                        <small>@secretKey</small>
                    </dd>
                </dl>
            </div>
        </div>
        <div class="col-md-8">
            <div class="well">
                <div class="pull-left">
                    <script type="text/javascript">

                        function resolveTextfield() {
                            return document.querySelector('#create-bucket div input[name=bucketName]')
                        }

                        function checkBucketName() {
                            return new Promise(function (resolve, reject) {
                                // make sure we have the text field
                                const textfield = resolveTextfield();
                                if (!textfield) {
                                    reject(undefined);
                                }

                                // make sure we have a proper name
                                const name = textfield.value;
                                if (!name || name.trim() !== name
                                          || name.indexOf('/') >= 0
                                          || name.indexOf('\\') >= 0
                                          || name.indexOf('..') >= 0
                                          || name === '.') {
                                    reject(name);
                                }

                                resolve(name);
                            });
                        }

                        /**
                         * Checks the form for errors and styles the input accordingly.
                         */
                        function checkForm() {
                            checkBucketName().then(function (name) {
                                // remove style class `error`
                                const textfield = resolveTextfield();
                                if (textfield) {
                                    textfield.classList.remove('error');
                                }
                            }).catch(function (name) {
                                // add style class `error` unless empty
                                const textfield = resolveTextfield();
                                if (textfield) {
                                    textfield.classList.remove('error');
                                    if (name) {
                                        textfield.classList.add('error');
                                    }
                                }
                            });
                        }

                        /**
                         * Checks the form for errors and submits the form if everything is fine.
                         */
                        function submitForm() {
                            checkBucketName().then(function (name) {
                                location.href = '/ui/' + encodeURIComponent(name) + '?create'
                            }).catch(function () {
                                // ignore, error has already been indicated while typing
                            });
                        }

                    </script>
                    <form id="create-bucket" class="form-inline" onsubmit="submitForm(); return false;">
                        <div class="input-group">
                            <input type="text" name="bucketName" class="form-control" placeholder="New Bucket..."
                                   autofocus oninput="checkForm();"/>
                            <span class="input-group-addon" onclick="submitForm();">
                                <i class="fa fa-plus"></i>
                            </span>
                        </div>
                    </form>
                </div>
                <div class="pull-right">
                    <a class="btn btn-default" href="/ui">
                        <i class="fa fa-refresh"></i>
                    </a>
                </div>
                <span class="clearfix"></span>
            </div>

            <w:table data="buckets">
                <thead>
                <tr>
                    <th>Bucket</th>
                    <th></th>
                </tr>
                </thead>
                <tbody>
                <i:for type="ninja.Bucket" var="bucket" items="buckets">
                    <tr @if(bucket.isPrivate()) { class="error" }>
                        <td>
                            <a class="link" href="/ui/@bucket.getName()">@bucket.getName()</a><br>
                            <i:if test="bucket.isPrivate()">
                                <small class="muted">private</small>
                            </i:if>
                        </td>
                        <td class="align-right col-md-2">
                            <w:deleteLink url="@apply('/ui/%s/delete', bucket.getName())"/>
                        </td>
                    </tr>
                </i:for>
                </tbody>
            </w:table>
        </div>
    </div>

    <i:block name="footer">
        <i:invoke template="/templates/footer.html.pasta"/>
    </i:block>
</w:page>
